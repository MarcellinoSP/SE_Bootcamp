classDiagram
    GameRunner"1" <|-- "4"Players
    GameRunner "1" <|-- "1" Board
    GameRunner "1"<|-- "100"Tiles
    GameRunner "1"<|-- "1"Leaderboard
    Tiles "1"<|-- "2" TilePart
    Players <|-- IPlayer
    class Players{
        -string playerName
        -string playerID
        +playTile()
        +skipTurn()
    }
    class Board{
        -int rowSize
        -int columnSize
    }
    class Tiles{
        -int value
    }
    class TilePart{
        <<interface>>
        -setSideXValue(value)
    }
    class Leaderboard{
        -string ~playerLists~
        +ShowLeaderboard()
    }
    class GameRunner{
        +string ~playerLists~
        +var ~tileList~
        -var ~ownedTileByPlayer~
        +runGame()
    }
    class IPlayer{
        <<interface>>
        -setPlayerName();
        -setPlayerID();
    }


    classDiagram
    IPlayer <|-- Players
    IPlayer *-- PlaceTile
    Players <-- Tile
    Drawer o-- Tile
    Drawer <-- Board
    Tile <|-- TilePart 
    TilePart <|-- TilePoint
    PlaceTile *-- Tile
    GameRunner o-- IPlayer
    GameRunner *-- Board

    class GameRunner{
        +IPlayer player[4]
        +~Tile~ tile[28]
        +Drawer ~tileRemained~
        +GameBegin()
        +CheckDoubleTile()
        +GameEnded()
        +bool playersTileRemained()
    }
    class PlaceTile{
        -Tile choosenTile
        -var position
        -bool checkTile()
    }
    class Board{
        -int size
    }
    class Players{
        -string ~Tile~ tile
    }
    class IPlayer{
        <<interface>>
        -placeMove();
        -drawTile()
    }
    class Tile{
        <<abstract>>
        -Tile(TilePart sideA, TilePart sideB)
        -int value
    }
    class TilePart{
        -int number
    }
    class TilePoint{
        bool isPaired();
    }
    class Drawer{
        -string ~tileList~
    }
    class Message{
        <<enum>>
        DrawTile
        WinTheGame
        LostTheGame
    }
    class LeaderBoard{
       -List ~Player~ condition
       -sortRank()
    }